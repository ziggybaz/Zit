		ZiT
Building out 'git'. This is one of the coding challenges provided by Codecrafters.

Difficulty Level: I'd say beginner in terms of code complexity but it's a good project for understanding git. If you do research it takes a bit of time to complete but if you're in it just to complete the challenge then an hour or 
two is enough.

It has 7 steps:
1. Initializing the '.git' directory.
Entails creating the '.git' directory and populating all its initialization files and folders.
Upon initialization, git directory contains the following {1.objects/contains git objects 2.refs/contains git references 3.HEAD/contains a reference to current branch}
Implementing it is easy as the only logic is to check the cli commands entered and from that create the directories and folders and store them on local disk. step achieved using (args, env, fs).

***
Git Objects.
Git is a "content-addressed filesystem" meaning the names of files as stored by git are mathematically derived from their contents
So, Objects are files in the git repo whose paths are determined by their contents.

2. Reading a blob object.
to achieve this, you need to write out the logic for "git cat-file".
"cat-file" is a 'plumbing' cmd used to print out existing git objects to stdout.
Doing it: remember git stores files using SHA-1 hash, so once you know the hash you just decompress the file using zlib and voila you have the data.

3. creating a blob object.
you use the "hash-object" plumbing cmd together with the '-w' flag which indicates tou write it to the '.git/objects/{}/{}' file.
as mentioned above, a blob object has to be encrypted using SHA-1 and compressed using zlib.
note that when edit a file, git doesn't alter the state of a previously stored object instead it writes a new, so when doing error-handling, include that guarg Ziggy

4. Reading a tree object.
The command in question is 'ls-tree' which is used to inspect a tree object. git tree objects contain the structure of directories and files at a particular commit
so to pass this stage all I needed to do was to return data in the following format: 'file/dirName' that's if you use the '--name-only' flag
but I'd like to try run the full implementation where data is returned in the following format '<mode> tree <tree_sha> file/dirName', let's try it out but to pass the challenge I'll do it their way first
currently doing

well initially I was planning on doing the whole git implementation but not gonna lie, this section was a brain-fuck, I kept messing up the file path i.e was failing at the first test case, reading the 
object, was reading from '.git' instead of '.git/objects/'. was stuck on this for a good week and a half, smh, now it looks simple but I almost cried.

once you've read the *correct object, you have to decompress the said object remember git uses the sha-1 encoding, easy bit, have done this a few times now and its code is in the zlib docs.
finally, you have to parse the tree entries. the decompressed data is parsed to extract file modes, names and sha-1 hashes, achieved by iterating through the said entries and only at the end printing what 
is required by '--names-only'.

final complex bit was the iteration,(iterating over the bytes in the decompressed tree)
 
5. Writing a tree object
*****this had to be the hardest part hands down, took a while but was able to finish
6. Creating a commit tree.

7. Cloning a repository


Code-Improvements:
a. Error-Handling.

b. Testing.

c. Refactoring-issues.
What about using an iterator to make the code cleaner instead of reading from string vector? 
